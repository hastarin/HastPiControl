// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HastPiControl.Adafruit.v2
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for AdafruitIO.
    /// </summary>
    public static partial class AdafruitIOExtensions
    {
            /// <summary>
            /// Get information about the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static User CurrentUser(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CurrentUserAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> CurrentUserAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CurrentUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All activities for current user
            /// </summary>
            /// The Activities endpoint returns information about the user's activities.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Activity> AllActivities(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllActivitiesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All activities for current user
            /// </summary>
            /// The Activities endpoint returns information about the user's activities.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Activity>> AllActivitiesAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllActivitiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities by type for current user
            /// </summary>
            /// The Activities endpoint returns information about the user's activities.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Activity> GetActivity(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetActivityAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities by type for current user
            /// </summary>
            /// The Activities endpoint returns information about the user's activities.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Activity>> GetActivityAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All feeds for current user
            /// </summary>
            /// The Feeds endpoint returns information about the user's feeds. The
            /// response includes the latest value of each feed, and other metadata about
            /// each feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Feed> AllFeeds(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllFeedsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All feeds for current user
            /// </summary>
            /// The Feeds endpoint returns information about the user's feeds. The
            /// response includes the latest value of each feed, and other metadata about
            /// each feed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Feed>> AllFeedsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllFeedsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed CreateFeed(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> CreateFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get feed by feed key
            /// </summary>
            /// Returns feed based on the feed key
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed GetFeed(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get feed by feed key
            /// </summary>
            /// Returns feed based on the feed key
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> GetFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed ReplaceFeed(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> ReplaceFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed UpdateFeed(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> UpdateFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DestroyFeed(this IAdafruitIO operations)
            {
                Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DestroyFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DestroyFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get detailed feed by feed key
            /// </summary>
            /// Returns more detailed feed record based on the feed key
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed GetFeedDetails(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetFeedDetailsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get detailed feed by feed key
            /// </summary>
            /// Returns more detailed feed record based on the feed key
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> GetFeedDetailsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFeedDetailsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All data for current feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resolution'>
            /// A resolution size in seconds. By giving a resolution value you will get
            /// back grouped data points averaged over resolution-sized intervals.
            /// </param>
            public static IList<Data> AllData(this IAdafruitIO operations, int? resolution = default(int?))
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllDataAsync(resolution), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All data for current feed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resolution'>
            /// A resolution size in seconds. By giving a resolution value you will get
            /// back grouped data points averaged over resolution-sized intervals.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Data>> AllDataAsync(this IAdafruitIO operations, int? resolution = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllDataWithHttpMessagesAsync(resolution, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data CreateData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> CreateDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Previous Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data PreviousData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).PreviousDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Previous Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> PreviousDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PreviousDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Next Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data NextData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).NextDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Next Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> NextDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NextDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Last Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data LastData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).LastDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Last Data in Queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> LastDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LastDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns data based on feed key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data GetData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns data based on feed key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> GetDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data ReplaceData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> ReplaceDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data UpdateData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> UpdateDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete existing Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All groups for current user
            /// </summary>
            /// The Groups endpoint returns information about the user's groups. The
            /// response includes the latest value of each feed in the group, and other
            /// metadata about the group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Group> AllGroups(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllGroupsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All groups for current user
            /// </summary>
            /// The Groups endpoint returns information about the user's groups. The
            /// response includes the latest value of each feed in the group, and other
            /// metadata about the group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Group>> AllGroupsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group CreateGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> CreateGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Group based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group GetGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Group based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> GetGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group ReplaceGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> ReplaceGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group UpdateGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> UpdateGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an existing Feed to a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group AddFeedToGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AddFeedToGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an existing Feed to a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> AddFeedToGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddFeedToGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a Feed from a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Group RemoveFeedFromGroup(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).RemoveFeedFromGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a Feed from a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> RemoveFeedFromGroupAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveFeedFromGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All feeds for current user in a given group
            /// </summary>
            /// The Group Feeds endpoint returns information about the user's feeds. The
            /// response includes the latest value of each feed, and other metadata about
            /// each feed, but only for feeds within the given group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Feed> AllGroupFeeds(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllGroupFeedsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All feeds for current user in a given group
            /// </summary>
            /// The Group Feeds endpoint returns information about the user's feeds. The
            /// response includes the latest value of each feed, and other metadata about
            /// each feed, but only for feeds within the given group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Feed>> AllGroupFeedsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllGroupFeedsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Feed in a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Feed CreateGroupFeed(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateGroupFeedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Feed in a Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> CreateGroupFeedAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupFeedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All data for current feed in group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime'>
            /// Start time for filtering data. Returns data created after given time.
            /// </param>
            /// <param name='endTime'>
            /// End time for filtering data. Returns data created before give time.
            /// </param>
            /// <param name='limit'>
            /// Limit the number of records returned.
            /// </param>
            public static IList<Data> AllGroupFeedData(this IAdafruitIO operations, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllGroupFeedDataAsync(startTime, endTime, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All data for current feed in group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime'>
            /// Start time for filtering data. Returns data created after given time.
            /// </param>
            /// <param name='endTime'>
            /// End time for filtering data. Returns data created before give time.
            /// </param>
            /// <param name='limit'>
            /// Limit the number of records returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Data>> AllGroupFeedDataAsync(this IAdafruitIO operations, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllGroupFeedDataWithHttpMessagesAsync(startTime, endTime, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Data CreateGroupFeedData(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateGroupFeedDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new Data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Data> CreateGroupFeedDataAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupFeedDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All dashboards for current user
            /// </summary>
            /// The Dashboards endpoint returns information about the user's dashboards.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Dashboard> AllDashboards(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllDashboardsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All dashboards for current user
            /// </summary>
            /// The Dashboards endpoint returns information about the user's dashboards.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Dashboard>> AllDashboardsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllDashboardsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Dashboard CreateDashboard(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateDashboardAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> CreateDashboardAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDashboardWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Dashboard based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Dashboard GetDashboard(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetDashboardAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Dashboard based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> GetDashboardAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Dashboard ReplaceDashboard(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceDashboardAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> ReplaceDashboardAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceDashboardWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Dashboard UpdateDashboard(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateDashboardAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> UpdateDashboardAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDashboardWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyDashboard(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyDashboardAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Dashboard
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyDashboardAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyDashboardWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All blocks for current user
            /// </summary>
            /// The Blocks endpoint returns information about the user's blocks.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Block> AllBlocks(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllBlocksAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All blocks for current user
            /// </summary>
            /// The Blocks endpoint returns information about the user's blocks.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Block>> AllBlocksAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllBlocksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Block CreateBlock(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateBlockAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Block> CreateBlockAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBlockWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Block based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Block GetBlock(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetBlockAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Block based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Block> GetBlockAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlockWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Block ReplaceBlock(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceBlockAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Block> ReplaceBlockAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBlockWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Block UpdateBlock(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateBlockAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Block> UpdateBlockAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBlockWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyBlock(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyBlockAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyBlockAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyBlockWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All tokens for current user
            /// </summary>
            /// The Tokens endpoint returns information about the user's tokens.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Token> AllTokens(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllTokensAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All tokens for current user
            /// </summary>
            /// The Tokens endpoint returns information about the user's tokens.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Token>> AllTokensAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllTokensWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Token CreateToken(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Token> CreateTokenAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Token based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Token GetToken(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Token based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Token> GetTokenAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Token ReplaceToken(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Token> ReplaceTokenAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Token UpdateToken(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Token> UpdateTokenAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyToken(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyTokenAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All triggers for current user
            /// </summary>
            /// The Triggers endpoint returns information about the user's triggers.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Trigger> AllTriggers(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllTriggersAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All triggers for current user
            /// </summary>
            /// The Triggers endpoint returns information about the user's triggers.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Trigger>> AllTriggersAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllTriggersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Trigger CreateTrigger(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreateTriggerAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> CreateTriggerAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTriggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Trigger based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Trigger GetTrigger(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetTriggerAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Trigger based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> GetTriggerAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Trigger ReplaceTrigger(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplaceTriggerAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> ReplaceTriggerAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceTriggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Trigger UpdateTrigger(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdateTriggerAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> UpdateTriggerAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTriggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyTrigger(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyTriggerAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyTriggerAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyTriggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// All permissions for current user and type
            /// </summary>
            /// The Permissions endpoint returns information about the user's permissions.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Permission> AllPermissions(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).AllPermissionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// All permissions for current user and type
            /// </summary>
            /// The Permissions endpoint returns information about the user's permissions.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Permission>> AllPermissionsAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllPermissionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Permission CreatePermission(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).CreatePermissionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Permission> CreatePermissionAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePermissionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Permission based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Permission GetPermission(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).GetPermissionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Permission based on ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Permission> GetPermissionAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPermissionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Permission ReplacePermission(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).ReplacePermissionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Permission> ReplacePermissionAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePermissionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties of an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Permission UpdatePermission(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).UpdatePermissionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Permission> UpdatePermissionAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePermissionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string DestroyPermission(this IAdafruitIO operations)
            {
                return Task.Factory.StartNew(s => ((IAdafruitIO)s).DestroyPermissionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Permission
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DestroyPermissionAsync(this IAdafruitIO operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DestroyPermissionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
