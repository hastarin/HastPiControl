//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace hastarin { namespace GarageDoor {

public interface class IGarageDoorConsumer
{
    event Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ IsOpenChanged;
    event Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ IsPartiallyOpenChanged;
};

public ref class GarageDoorConsumer sealed  : [Windows::Foundation::Metadata::Default] IGarageDoorConsumer, ISignalEmitter
{
public:
    GarageDoorConsumer(Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);
    virtual ~GarageDoorConsumer();

    // Create a consumer from a device Id asynchronously.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<GarageDoorConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId);

    // Create a consumer from a device Id asynchronously with the provided bus attachment.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<GarageDoorConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId, _In_ Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);

    int32 GarageDoorConsumer::Initialize(_In_ Windows::Devices::AllJoyn::AllJoynServiceInfo^ serviceInfo);

    // "Opens the door if it's closed."
    // Call the Open method
    Windows::Foundation::IAsyncOperation<GarageDoorOpenResult^>^ OpenAsync(_In_ bool interfaceMemberPartialOpen);
    // "Close the door if it's open."
    // Call the Close method
    Windows::Foundation::IAsyncOperation<GarageDoorCloseResult^>^ CloseAsync();
    // "Will trigger the push button on the garage door."
    // Call the PushButton method
    Windows::Foundation::IAsyncOperation<GarageDoorPushButtonResult^>^ PushButtonAsync();

    // This event fires whenever the value of IsOpen changes.
    virtual event Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ IsOpenChanged 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ handler) 
        { 
            return _IsOpenChanged += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<GarageDoorConsumer^>(sender), safe_cast<Platform::Object^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _IsOpenChanged -= token; 
        } 
    internal: 
        void raise(GarageDoorConsumer^ sender, Platform::Object^ args) 
        { 
            _IsOpenChanged(sender, args);
        } 
    }

    // "Is TRUE if the door is open."
    // Get the value of the IsOpen property.
    Windows::Foundation::IAsyncOperation<GarageDoorGetIsOpenResult^>^ GetIsOpenAsync();

    // This event fires whenever the value of IsPartiallyOpen changes.
    virtual event Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ IsPartiallyOpenChanged 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<GarageDoorConsumer^, Platform::Object^>^ handler) 
        { 
            return _IsPartiallyOpenChanged += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<GarageDoorConsumer^>(sender), safe_cast<Platform::Object^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _IsPartiallyOpenChanged -= token; 
        } 
    internal: 
        void raise(GarageDoorConsumer^ sender, Platform::Object^ args) 
        { 
            _IsPartiallyOpenChanged(sender, args);
        } 
    }

    // "Is TRUE if the door is only partially open for air flow."
    // Get the value of the IsPartiallyOpen property.
    Windows::Foundation::IAsyncOperation<GarageDoorGetIsPartiallyOpenResult^>^ GetIsPartiallyOpenAsync();


    // Used to send signals or register functions to handle received signals.
    property GarageDoorSignals^ Signals
    {
        GarageDoorSignals^ get() { return m_signals; }
    }

    // Used to get the name of the interface this consumer implements.
    static property Platform::String^ InterfaceName
    {
        Platform::String^ get() { return AllJoynHelpers::MultibyteToPlatformString(m_interfaceName); }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynBusObject^ BusObject
    {
        Windows::Devices::AllJoyn::AllJoynBusObject^ get() { return m_busObject; }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynSession^ Session
    {
        Windows::Devices::AllJoyn::AllJoynSession^ get() { return m_session; }
    }

internal:
    // Consumers do not support property get.
    QStatus OnPropertyGet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _Inout_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    // Consumers do not support property set.
    QStatus OnPropertySet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _In_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    void OnPropertyChanged(_In_ alljoyn_proxybusobject obj, _In_ PCSTR interfaceName, _In_ const alljoyn_msgarg changed, _In_ const alljoyn_msgarg invalidated);

    property Platform::String^ ServiceObjectPath
    {
        Platform::String^ get() { return m_ServiceObjectPath; }
        void set(Platform::String^ value) { m_ServiceObjectPath = value; }
    }

    property alljoyn_proxybusobject ProxyBusObject
    {
        alljoyn_proxybusobject get() { return m_proxyBusObject; }
        void set(alljoyn_proxybusobject value) { m_proxyBusObject = value; }
    }

private:
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionLost;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberAdded;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberRemoved;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _IsOpenChanged;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _IsPartiallyOpenChanged;

    // Register a callback function to handle incoming signals.
    QStatus AddSignalHandler(_In_ alljoyn_busattachment busAttachment, _In_ alljoyn_interfacedescription interfaceDescription, _In_ PCSTR methodName, _In_ alljoyn_messagereceiver_signalhandler_ptr handler);


    Windows::Devices::AllJoyn::AllJoynBusAttachment^ m_busAttachment;
    Windows::Devices::AllJoyn::AllJoynBusObject^ m_busObject;
    Windows::Devices::AllJoyn::AllJoynSession^ m_session;
    GarageDoorSignals^ m_signals;
    Platform::String^ m_ServiceObjectPath;

    alljoyn_proxybusobject m_proxyBusObject;
    alljoyn_sessionlistener m_sessionListener;
    alljoyn_busobject m_nativeBusObject;
    alljoyn_busattachment m_nativeBusAttachment;

    // Used to pass a pointer to this class to callbacks
    Platform::WeakReference* m_weak;

    // This map is required because we need a way to pass the consumer to the signal
    // handlers, but the current AllJoyn C API does not allow passing a context to these
    // callbacks.
    static std::map<alljoyn_interfacedescription, Platform::WeakReference*> SourceInterfaces;

    // The name of the interface this consumer implements.
    static PCSTR m_interfaceName;
};

} } } 
